#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server-app:server");
var http = require("http");

/**
 * Create HTTP server.
 */
var mongoose = require("mongoose"); // Import mongoose

// Connect to the MongoDB database
mongoose
  .connect(
    "mongodb+srv://noor:12345@cluster0.nlfm68n.mongodb.net/recommended-place",
    {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    }
  )
  .then(() => {
    console.log("Connected to MongoDB");
    startServer(); // Start the server after the database connection is established
  })
  .catch((err) => {
    console.error("Error connecting to MongoDB:", err);
  });

function startServer() {
  // Get the port from the environment and store it in Express
  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  // Create the HTTP server
  var server = http.createServer(app);

  // Event listeners for server errors and listening
  server.on("error", onError);
  server.on("listening", onListening);

  // Listen on the provided port, on all network interfaces
  server.listen(port);

  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }
}
